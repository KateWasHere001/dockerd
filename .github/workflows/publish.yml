name: Build Docker for Android

on:
  workflow_dispatch:
    inputs:
      build_version:
        required: false
        type: string
        default: "latest"
      force:
        description: 'Force build'
        required: false
        type: boolean
        default: false

  schedule:
    - cron: '0 0 * * 0'
  
permissions:
  contents: write
  actions: write
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Fetch tags
      run: git fetch --prune --unshallow --tags

    - name: Checkout Termux Code
      uses: actions/checkout@v4
      with:
        repository: mgksu/termux-packages
        fetch-depth: 1
        path: termux-packages
    
    - name: Get latest stable release from docker
      id: get_stable_release
      uses: octokit/request-action@v2.x
      with:
        route: GET /repos/moby/moby/releases/latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get latest tag
      run: |
        #latestTag="${{ fromJSON(steps.get_stable_release.outputs.data).tag_name }}"
        if [ "${{ inputs.build_version }}" == "latest" ]; then
          latestTag="${{ fromJSON(steps.get_stable_release.outputs.data).tag_name }}"
          echo "build latest version."
        else
          latestTag="${{ inputs.build_version }}"
          echo "build ${{ inputs.build_version }} version."
        fi
        echo "Latest tag: $latestTag"
        echo "DOCKER_VERSION=${latestTag}" >> $GITHUB_ENV
    
    - name: Check Latest Version
      if: ${{ inputs.force == false }}
      run: |
        LATEST_VERSION=$(git describe --tags --abbrev=0 --always)
        if [ "$LATEST_VERSION" == "${{ env.DOCKER_VERSION }}" ]; then
          gh run cancel ${{ github.run_id }}
        else
          echo "New version found: ${LATEST_VERSION}"
        fi
      env:
       GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build Docker
      run: |
        cd termux-packages
        patch -p1 < ../patches/docker.patch
        version="${{ env.DOCKER_VERSION }}"
        sed -i "s|^TERMUX_PKG_VERSION=.*|TERMUX_PKG_VERSION=${version#v}|" root-packages/docker/build.sh
        ./scripts/run-docker.sh ./build-package.sh -i --format pacman docker docker-compose docker-buildx
        cd output
        bash ../../package_docker.sh
        mv docker.tar.xz ../../module/docker.tar.xz
        cd ..
        rm -rf termux-packages
    
    - name: Update module.prop
      run: |
          cd module
          version="${{ env.DOCKER_VERSION }}"
          version_code=$(echo "${version}" | sed 's/[^0-9]//g')
          echo "version=${version}" >> $GITHUB_ENV
          echo "versionCode=${version_code}" >> $GITHUB_ENV
          echo version=${version}
          echo versionCode=${version_code}
          
          echo "id=dockerd" > module.prop
          echo "name=Dockerd" >> module.prop
          echo "version=${version#v}" >> module.prop
          echo "versionCode=${version_code}" >> module.prop
          echo "author=repotitan" >> module.prop
          echo "description=Docker For Android" >> module.prop
          echo "updateJson=https://raw.githubusercontent.com/${{ github.repository }}/refs/heads/main/update.json" >> module.prop
    

    - name: Create Module
      run: |
        mkdir -p dist
        cd module && zip -9 -r ../dist/Magisk-Dockerd-${{ env.version }}.zip ./
    
    - name: Set up Git
      run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

    - name: Push updated files to Main branch
      if: ${{ inputs.force == false }}
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      run: |
          echo '{
            "version": "${{ env.version }}",
            "versionCode": "${{ env.versionCode }}",
            "zipUrl": "https://github.com/${{ github.repository }}/releases/download/${{ env.version }}/Magisk-Dockerd-${{ env.version }}.zip",
            "changelog": "https://raw.githubusercontent.com/${{ github.repository }}/main/CHANGELOG.md"
          }' > update.json
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Release ${{ env.version }}"
            git push origin HEAD:main --force
            git tag ${{ env.version }}
            git push origin ${{ env.version }} -f
          fi

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        append_body: true
        generate_release_notes: true
        make_latest: true
        files: |
          ./dist/Magisk-Dockerd-${{ env.version }}.zip
        name: ${{ env.version }}
        tag_name: ${{ env.version }}
        draft: ${{ inputs.force == false }}

